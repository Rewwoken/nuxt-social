generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @map("user_id")
  username  String    @unique
  email     String    @unique
  password  String
  verified  DateTime?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  profile          Profile?
  posts            Post[]
  mediFiles        MediaFile[]
  verificationCode VerificationCode?
  recoveryCode     RecoveryCode?

  @@map("user")
}

model VerificationCode {
  id        String   @id @default(uuid()) @map("verification_code_id")
  value     String
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@unique([userId, value])
  @@map("verification_code")
}

model RecoveryCode {
  id        String   @id @default(uuid()) @map("verification_code_id")
  value     String
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@unique([userId, value])
  @@map("recovery_code")
}

model Profile {
  id               String   @id @default(uuid()) @map("profile_id")
  name             String?
  bio              String?
  location         String?
  website          String?
  imageUrl         String?
  imageProviderId  String?  @map("image_provider_id")
  bannerUrl        String?
  bannerProviderId String?  @map("banner_provider_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@map("profile")
}

model Post {
  id        String   @id @default(uuid()) @map("post_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  author     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   String
  replyTo    Post?       @relation("PostReplies", fields: [replyToId], references: [id])
  replyToId  String?     @map("reply_to_id")
  replies    Post[]      @relation("PostReplies")
  mediaFiles MediaFile[]

  @@map("post")
}

model MediaFile {
  id         String   @id @default(uuid()) @map("user_id")
  url        String
  providerId String   @map("provider_id")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // No cascade deletion, should be deleted manually with deleting from Cloudinary
  user   User?   @relation(fields: [userId], references: [id])
  userId String?
  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  @@map("media_file")
}
